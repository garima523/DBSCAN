# -*- coding: utf-8 -*-
"""DBSCAN & KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SRukdtdfz7fVYx5HAezW6t8-fd2uQ7Aw
"""

import numpy as np
import pandas as pd
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from collections import Counter
import sys
import numpy

dataset = pd.read_csv('/content/sample_data/cluster_blobs.csv')
dataset.head(5)

db = DBSCAN(eps=0.8, min_samples=9).fit(dataset)

outliers = pd.DataFrame(dataset)

from pyparsing.helpers import col
fig = plt.figure()
ax = fig.add_axes([.1,.1,1,1])
colors = db.labels_

ax.scatter(dataset.iloc[:,0].values,dataset.iloc[:,1].values,c=colors)

ax.set_xlabel('X1')
ax.set_ylabel('X2')

plt.title('DBSCAN with Blob')
print(metrics.silhouette_score(dataset,colors))

from sklearn.cluster import KMeans
import seaborn as sns

kmeans = KMeans(n_clusters = 3)
kmeans.fit(dataset)

pd.Series(kmeans.labels_).value_counts()

preds = kmeans.labels_
ef3 = pd.DataFrame(dataset)
ef3['KMeans_Clusters'] = preds
ef3.head(5)

sns.scatterplot(ef3['X1'],ef3['X2'],hue='KMeans_Clusters',data=ef3) 
plt.title("KMeans_Clusters", fontsize=12)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()
metrics.silhouette_score(dataset, kmeans.labels_)

dataset1 = pd.read_csv('/content/sample_data/cluster_circles.csv')
dataset.head(5)

db1 = DBSCAN(eps=0.103, min_samples=10).fit(dataset1)

outliers = pd.DataFrame(dataset1)

from pyparsing.helpers import col
fig = plt.figure()
ax = fig.add_axes([.1,.1,1,1])
colors1 = db1.labels_

ax.scatter(dataset1.iloc[:,0].values,dataset1.iloc[:,1].values,c=colors1)

ax.set_xlabel('X1')
ax.set_ylabel('X2')

plt.title('DBSCAN with Circles')
print(metrics.silhouette_score(dataset1,colors1))

kmeans = KMeans(n_clusters = 2)
kmeans.fit(dataset1)

pd.Series(kmeans.labels_).value_counts()

preds = kmeans.labels_
ef4 = pd.DataFrame(dataset1)
ef4['KMeans_Clusters'] = preds
ef4.head(5)

sns.scatterplot(ef4['X1'],ef4['X2'],hue='KMeans_Clusters',data=ef4) 
plt.title("KMeans_clusters", fontsize=12)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()
metrics.silhouette_score(dataset1, kmeans.labels_)

dataset2 = pd.read_csv('/content/sample_data/cluster_moons.csv')
dataset2.head(5)

db2= DBSCAN(eps=0.123, min_samples=9).fit(dataset2)

outliers = pd.DataFrame(dataset2)

from pyparsing.helpers import col
fig = plt.figure()
ax = fig.add_axes([.1,.1,1,1])
colors2 = db2.labels_

ax.scatter(dataset2.iloc[:,0].values,dataset2.iloc[:,1].values,c=colors2)

ax.set_xlabel('X1')
ax.set_ylabel('X2')

plt.title('DBSCAN with Moons')
print(metrics.silhouette_score(dataset2,colors2))

kmeans = KMeans(n_clusters=2)
kmeans.fit(dataset2)

pd.Series(kmeans.labels_).value_counts()

preds = kmeans.labels_
ef7 = pd.DataFrame(dataset2)
ef7['KMeans_Clusters'] = preds
ef7.head(5)

sns.scatterplot(ef7['X_1'],ef7['X_2'],hue='KMeans_Clusters',data=ef7) 
plt.title("KMeans_clusters", fontsize=12)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()
metrics.silhouette_score(dataset2, kmeans.labels_)